from __future__ import absolute_import, unicode_literals

import copy
import os
import warnings

import dj_database_url
from django.utils.translation import gettext_lazy as _

# import our default settings
from .settings_common import *  # noqa
import logging

# -----------------------------------------------------------------------------------
# Add a custom brand for development
# -----------------------------------------------------------------------------------

custom = copy.deepcopy(BRANDING["rapidpro.io"])
custom["name"] = "{{ rapidpro_app_name }}"
custom["colors"] = dict(primary='#f2572c')
custom["styles"] = ['brands/rapidpro/font/style.css', 'brands/rapidpro/less/style.less']
custom["slug"] = "{{ rapidpro_slug }}"
custom["org"] = "{{ rapidpro_org_name }}"
custom["link"] = "https://{{ rapidpro_domain }}"
custom["api_link"] = "https://{{ rapidpro_domain }}/api"
custom["domain"] = "{{ rapidpro_domain }}"
custom["email"] = "{{ rapidpro_email }}"
custom["support_email"] = "{{ rapidpro_support_email }}"
custom["allow_signups"] = True
custom["welcome_packs"] = [dict(size=1000, name="Demo Account")]
BRANDING["{{ rapidpro_domain }}"] = custom

DEFAULT_BRAND = "{{ rapidpro_domain }}"

# -------------------------------------------------------------------------
# Used when creating callbacks for Twilio, Nexmo etc..
# -------------------------------------------------------------------------
HOSTNAME = '{{ rapidpro_domain }}'
TEMBA_HOST = '{{ rapidpro_domain }}'

DEBUG = False
TEMPLATE_DEBUG = DEBUG
TEMPLATES[0]['OPTIONS']['debug'] = False
COMPRESS_ENABLED = False
COMPRESS_OFFLINE = False

ALLOWED_HOSTS = [
{% for host in rapidpro_domains|list + rapidpro_allowed_hosts|list %}
    '{{ host }}',
{% endfor %}
]

# -----------------------------------------------------------------------------------
# Caching using Redis
# -----------------------------------------------------------------------------------
REDIS_HOST = "{{ rapidpro_redis_host }}"
REDIS_PORT = 6379
REDIS_DB = 10 if TESTING else 15  # we use a redis db of 10 for testing so that we maintain caches for dev

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://%s:%s/%s" % (REDIS_HOST, REDIS_PORT, REDIS_DB),
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
    }
}

# ----------------------------------------------------------------------------
# In development, perform background tasks in the web thread (synchronously)
# ----------------------------------------------------------------------------
CELERY_ALWAYS_EAGER = False
CELERY_EAGER_PROPAGATES_EXCEPTIONS = True
CELERY_RESULT_BACKEND = None
CELERY_BROKER_URL = "redis://%s:%d/%d" % (REDIS_HOST, REDIS_PORT, REDIS_DB)

# -----------------------------------------------------------------------------------
# Django-rest-framework configuration
# -----------------------------------------------------------------------------------
REST_FRAMEWORK["DEFAULT_THROTTLE_RATES"] =  {
      "v2": "{{ rapidpro_api_throttle_rate }}",
      "v2.contacts": "{{ rapidpro_api_throttle_rate }}",
      "v2.messages": "{{ rapidpro_api_throttle_rate }}",
      "v2.broadcasts": "{{ rapidpro_broadcasts_throttle_rate }}",
      "v2.runs": "{{ rapidpro_api_throttle_rate }}",
      "v2.api": "{{ rapidpro_api_throttle_rate }}",
  }

# Maximum active objects are org can have
MAX_ACTIVE_CONTACTFIELDS_PER_ORG = {{ rapidpro_max_active_contactfields }}
MAX_ACTIVE_CONTACTGROUPS_PER_ORG = {{ rapidpro_max_active_contactgroups }}
MAX_ACTIVE_GLOBALS_PER_ORG = {{ rapidpro_max_active_globals }}

# ----------------------------------------------------------------------------
# Need a PostgreSQL database on localhost with postgis extension installed.
# ----------------------------------------------------------------------------
DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': '{{ rapidpro_postgresql_database }}',
        'USER': '{{ rapidpro_postgresql_user }}',
        'PASSWORD': '{{ rapidpro_postgresql_password }}',
        'HOST': '{{ rapidpro_postgresql_host }}',
        'PORT': {{ rapidpro_postgresql_port }},
        'DISABLE_SERVER_SIDE_CURSORS': {{ rapidpro_disable_server_side_cursors }},
        'ATOMIC_REQUESTS': True,
        'OPTIONS': {
        }
    }
}
DATABASES['readonly'] = DATABASES['default'].copy()
# reuse our connections for up to 60 seconds
DATABASES['default']['CONN_MAX_AGE'] = 60

INTERNAL_IPS = ('127.0.0.1',)

# -----------------------------------------------------------------------------------
# Mailroom - localhost for dev, no auth token
# -----------------------------------------------------------------------------------
MAILROOM_URL = '{{ rapidpro_mailroom_url }}'
MAILROOM_AUTH_TOKEN = None

# ----------------------------------------------------------------------------
# Load nose in development
# ----------------------------------------------------------------------------
# INSTALLED_APPS = INSTALLED_APPS + ('django_nose', 'storages')
# INSTALLED_APPS = INSTALLED_APPS + ('debug_toolbar', )
INSTALLED_APPS = INSTALLED_APPS + (
    'storages',
{% if rapidpro_enable_oidc %}
    'oidc',
{% endif %}
)

# Import additional urls
APP_URLS += [
{% if rapidpro_enable_oidc %}
    "oidc.urls",
{% endif %}
]

# ----------------------------------------------------------------------------
# In development, add in extra logging for exceptions and the debug toolbar
# ----------------------------------------------------------------------------
MIDDLEWARE = (
  'temba.middleware.ExceptionMiddleware',
) + MIDDLEWARE


ADMINS = (
            ('RapidPro', '{{ rapidpro_admin_email }}'),
)
MANAGERS = ADMINS

# ----------------------------------------------------------------------------
# set the mail settings, override these in your settings.py
# if your site was at http://temba.io, it might look like this:
# ----------------------------------------------------------------------------
EMAIL_HOST = '{{ rapidpro_smtp_host }}'
EMAIL_PORT = {{ rapidpro_smtp_port }}
EMAIL_HOST_USER = '{{ rapidpro_smtp_user }}'
DEFAULT_FROM_EMAIL = '{{ rapidpro_smtp_default_from_email }}'
EMAIL_HOST_PASSWORD = '{{ rapidpro_smtp_password }}'
EMAIL_USE_TLS = {{ rapidpro_smtp_use_tls }}
FLOW_FROM_EMAIL = '{{ rapidpro_flow_from_email }}'

# where recordings and exports are stored
DEFAULT_FILE_STORAGE = '{{ rapidpro_file_storage_backend }}'
{% if rapidpro_file_storage_backend == 'storages.backends.s3boto3.S3Boto3Storage' %}
AWS_STORAGE_BUCKET_NAME = '{{ rapidpro_s3_bucket }}'
AWS_ACCESS_KEY_ID = '{{ rapidpro_aws_access_key }}'
AWS_SECRET_ACCESS_KEY = '{{ rapidpro_aws_secret_key }}'
AWS_DEFAULT_ACL = 'public-read'
AWS_S3_FILE_OVERWRITE = False
S3_USE_SIGV4 = True
AWS_S3_REGION_NAME = '{{ rapidpro_s3_region }}'
AWS_S3_ENDPOINT_URL = '{{ rapidpro_s3_endpoint }}'
AWS_S3_SECURE_URLS = True
AWS_BUCKET_DOMAIN = '{{ rapidpro_s3_endpoint }}/{{ rapidpro_s3_bucket}}'
STORAGE_URL = AWS_BUCKET_DOMAIN
{% elif rapidpro_file_storage_backend == 'django.core.files.storage.FileSystemStorage' %}
MEDIA_URL = 'https://{{ rapidpro_domain }}/media/'
FILE_UPLOAD_PERMISSIONS = 0o644
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755
STORAGE_URL = 'https://{{ rapidpro_domain }}/media'
{% endif %}

######
# DANGER: only turn this on if you know what you are doing!
#         could cause messages to be sent to live customer aggregators
SEND_MESSAGES = True

######
# DANGER: only turn this on if you know what you are doing!
#         could cause external APIs to be called in test environment
SEND_WEBHOOKS = True

######
# DANGER: only turn this on if you know what you are doing!
#         could cause emails to be sent in test environment
SEND_EMAILS = True

######
# DANGER: only turn this on if you know what you are doing!
#         required for TransferTo to work
SEND_AIRTIME = {{ rapidpro_send_airtime }}

# -----------------------------------------------------------------------------------
# This setting throws an exception if a naive datetime is used anywhere.
# (they should always contain a timezone)
# -----------------------------------------------------------------------------------
warnings.filterwarnings(
        'error', r"DateTimeField .* received a naive datetime",
        RuntimeWarning, r'django\.db\.models\.fields')

# -----------------------------------------------------------------------------------
# Make our sitestatic URL be our static URL on development
# -----------------------------------------------------------------------------------
STATIC_URL = '/sitestatic/'
MEDIA_ROOT = os.path.join('/', 'home', 'rapidpro', 'media/')

DEFAULT_BRAND = '{{ rapidpro_domain }}'

TWITTER_API_KEY = '{{ rapidpro_twitter_api_key }}'
TWITTER_API_SECRET = '{{ rapidpro_twitter_api_secret }}'

FACEBOOK_APPLICATION_ID = "{{ rapidro_facebook_application_id }}"
FACEBOOK_APPLICATION_SECRET = "{{ rapidpro_facebook_application_secret }}"
FACEBOOK_WEBHOOK_SECRET = "{{ rapidpro_facebook_webhook_secret }}"

SENTRY_DSN = '{{ rapidpro_raven_dsn }}'
if SENTRY_DSN:  # pragma: no cover
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[DjangoIntegration(), CeleryIntegration(), LoggingIntegration()],
        send_default_pii=True,
    )
    ignore_logger("django.security.DisallowedHost")

IS_PROD = {{ rapidpro_is_prod }}
SEGMENT_IO_KEY = '{{ rapidpro_segment_io_key }}'

ELASTICSEARCH_URL = "{{ rapidpro_elasticsearch_url }}"

COMPRESS_ENABLED = True
COMPRESS_OFFLINE = False
COMPRESS_CSS_HASHING_METHOD = "content"
COMPRESS_OFFLINE_CONTEXT = dict(
    STATIC_URL=STATIC_URL, base_template="frame.html", brand=BRANDING[DEFAULT_BRAND], debug=False, testing=False
)

{% if rapidpro_enable_oidc %}
# -----------------------------------------------------------------------------------
# Open ID Connect Configuration
# -----------------------------------------------------------------------------------
OPENID_CONNECT_VIEWSET_CONFIG = {
{% for setting_name, setting_value in rapidpro_openid_viewset_config.items() %}
    {% if setting_value is mapping %}
    "{{ setting_name }}": {
        {% for value_name, value in setting_value.items() %}
            "{{ value_name }}": {{ value }},
        {% endfor %}
    }
    {% else %}
    "{{ setting_name }}": {{ setting_value }},
    {% endif %}
{% endfor %}
}

OPENID_CONNECT_AUTH_SERVERS = {
{% for authserver_name, authserver_details in rapidpro_openid_auth_servers.items() %}
    "{{ authserver_name }}": {
        {% for detail_name, detail_value in authserver_details.items() %}
        "{{ detail_name }}": {{ detail_value }},
        {% endfor %}
    }
{% endfor %}
}
{% endif %}
